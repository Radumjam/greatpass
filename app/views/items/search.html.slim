- content_for(:title) do
  - if @search_params[:platform_username] 
    = @search_params[:platform_username]
  - elsif @hero_item
    = "#{@hero_item.name} - #{@hero_item.kind.titleize}"
  - elsif !current_page?('/')
    = "Search"
end

- if current_page?('/')
  .row
    .col-xs-12
      p 
        | Great Pass helps you find 
        = link_to 'Rocket League', 'http://www.rocketleaguegame.com/', target: '_blank' 
        |  items available via in-game Player-to-Player trading.
        br
        | Contact the owner on their platform or look for them in 
        = link_to 'our Discord channel', 'https://discord.gg/3U87mfj', target: '_blank'
        |  to discuss a trade.

.row
  .col-xs-12
    - if @platform_user
      #platform-user-header
        h4
          i class="icon #{platform_ion_class(@platform_user.platform)}"
          | &nbsp;
          = @platform_user.platform_username
          |  - Inventory
        = render 'users/contact_options'
        p
          | You can search through the player's inventory below or view 
          = link_to 'their wishlist', platform_user_wishlist_path(platform_string: @platform_user.platform.downcase, platform_username: @platform_user.platform_username)
          | .
    - elsif @hero_item
      #hero-item-header
        h4 = "#{@hero_item.name} - #{@hero_item.kind.titleize}"
        = image_tag @hero_item.game_preview.url
    - else
      h4 Search
      
    .panel.panel-default
      = bootstrap_form_tag url: search_path, html: { method: 'get', autocomplete: 'off' } do |f|
        .panel-body
          .col-sm-4
            = f.select :item_id, 
              options_for_select(Item.all.collect { |i| [ i.name, i.id ] }, @search_params[:item_id]), 
              { include_blank: 'All' }, { multiple: true, namespace: 'search' }
          .col-sm-4
            = f.select :kind,
              options_for_select(Item.kinds.sort.map { |k, v| [k.titleize, v] }, @search_params[:kind]), 
              { include_blank: 'All', label: 'Type' }, { multiple: true, namespace: 'search' }
          .col-sm-4
            = f.select :rare_class,
              options_for_select(Item.rare_classes.sort.map { |k, v| [k.titleize, v] }, @search_params[:rare_class]),
              { include_blank: 'All', label: 'Class' }, { multiple: true, namespace: 'search' }
          .clearfix.visible-sm.visible-md.visible-lg
          .col-sm-6
            = f.select :certification, 
              options_for_select(@certification_options, @search_params[:certification]), 
              { include_blank: 'Any / None' }, { multiple: true, namespace: 'search' }
          .col-sm-6
            = f.select :paint_color, 
              options_for_select(@paint_options, @search_params[:paint_color]), 
              { include_blank: 'Any / None' }, { multiple: true, namespace: 'search' }
          .clearfix.visible-sm.visible-md.visible-lg
          .col-sm-6
            = f.select :platform, options_for_select(User.platforms.sort, @search_params[:platform]), 
            { include_blank: 'All' }, { multiple: true, namespace: 'search' }
          .col-sm-6
            = f.text_field :platform_username, label: 'Gamertag', value: @search_params[:platform_username], placeholder: 'All'
          .clearfix.visible-sm.visible-md.visible-lg
          - if !@platform_user
            .col-sm-6#list-radio-container
              = f.form_group :search_type  do
                = f.radio_button :search_type, 'i', label: 'Items players have', inline: true, checked: @search_params[:search_type] == 'i'
                = f.radio_button :search_type, 'w', label: 'Items players want', inline: true, checked: @search_params[:search_type] == 'w'
              end
          div class="#{@platform_user ? 'col-sm-12' : 'col-sm-6'}"
            = f.button class: 'btn btn-success', id: 'search-submit-button' do
              span.glyphicon.glyphicon-search aria-hidden='true'
              - if @platform_user
                |  Search 
                = @platform_user.platform_username
              - else
                |  Search
          

= render 'items/paginated_table'
